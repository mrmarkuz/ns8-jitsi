#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
from agent.ldapproxy import Ldapproxy

data = json.load(sys.stdin)
host = data.get("host", '')

port = data.get("port", '10000')
jvbip = data.get("jvbip", '192.168.1.1')

# Don't set env vars in environment for port and advertising IPs, they're set it in config.env
#agent.set_env("JVB_PORT",data.get("port","10000"))
#agent.set_env("JVB_ADVERTISE_IPS",data.get("jvbip","192.168.1.1"))

# Set the authtype to internal by default
authtype = "internal"

# Get LDAP domain
ldap_domain = data.get("ldap_domain", "")

# Set LDAP domain

agent.set_env("LDAP_DOMAIN",ldap_domain)

# unset LDAP
agent.unset_env("LDAP_URL")
agent.unset_env("LDAP_BASE")
agent.unset_env("LDAP_BINDDN")
agent.unset_env("LDAP_BINDPW")
agent.unset_env("LDAP_FILTER")
agent.unset_env("LDAP_AUTH_METHOD")
agent.unset_env("LDAP_VERSION")
agent.unset_env("LDAP_USE_TLS")
agent.unset_env("LDAP_TLS_CHECK_PEER")
agent.unset_env("LDAP_START_TLS")

# Check if an LDAP domain is set:

if ldap_domain != "":
    agent.bind_user_domains([ldap_domain])
    authtype = "ldap"

    # Get LDAP properties
    odom = Ldapproxy().get_domain(ldap_domain)
#    base_dn = odom['base_dn']

    agent.set_env("LDAP_URL","ldap://10.0.2.2:"+odom['port'])
    agent.set_env("LDAP_BASE",odom['base_dn'])
    agent.set_env("LDAP_BINDDN",odom['bind_dn'])
    agent.set_env("LDAP_BINDPW",odom['bind_password'])
    agent.set_env("LDAP_AUTH_METHOD","bind")
    agent.set_env("LDAP_TLS_CHECK_PEER","0")
    agent.set_env("LDAP_USE_TLS","0")
    agent.set_env("LDAP_VERSION","3")
    agent.set_env("LDAP_START_TLS","0")

    if odom['schema'] == "rfc2307":
        # OpenLDAP specific:
        agent.set_env("LDAP_FILTER","(uid=%u)")

    if odom['schema'] == "ad":
        # Samba AD specific:
        agent.set_env("LDAP_FILTER","(samaccountname=%u)")
else:
    agent.bind_user_domains([])

# Setup environment for jitsi
config = {
  "JVB_ADVERTISE_IPS": jvbip,
  "JICOFO_COMPONENT_SECRET": "df4jdDf49d3!dfg356Df83&",
  "JICOFO_AUTH_PASSWORD": "df4jdDf49d3!dfg356Df83&",
  "JVB_AUTH_PASSWORD": "df4jdDf49d3!dfg356Df83&",
  "JIGASI_XMPP_PASSWORD": "df4jdDf49d3!dfg356Df83&",
  "JIBRI_RECORDER_PASSWORD": "df4jdDf49d3!dfg356Df83&",
  "JIBRI_XMPP_PASSWORD": "df4jdDf49d3!dfg356Df83&",
  "TZ": "UTC",
  "PUBLIC_URL": "https://"+host,
  "ENABLE_LETSENCRYPT": "0",
  "ETHERPAD_TITLE": "Video Chat",
  "ETHERPAD_DEFAULT_PAD_TEXT": "Welcome to Web Chat!\\n\\n",
  "ETHERPAD_PUBLIC_URL": "https://etherpad."+host,
  "ETHERPAD_SKIN_NAME": "colibris",
  "ETHERPAD_SKIN_VARIANTS": "super-light-toolbar super-light-editor light-background full-width-editor",
  "ETHERPAD_URL_BASE": "http://etherpad.meet.jitsi",
  "ENABLE_AUTH": "1",
  "ENABLE_GUESTS": "1",
  "AUTH_TYPE": authtype,
  "ENABLE_AUTO_LOGIN": "1",
  "JICOFO_SESSION_LIFETIME": "3 hours",
  "XMPP_DOMAIN": "meet.jitsi",
  "XMPP_SERVER": "xmpp.meet.jitsi",
  "XMPP_BOSH_URL_BASE": "http://127.0.0.1:5280",
  "XMPP_AUTH_DOMAIN": "auth.meet.jitsi",
  "XMPP_MUC_DOMAIN": "muc.meet.jitsi",
  "XMPP_INTERNAL_MUC_DOMAIN": "internal-muc.meet.jitsi",
  "XMPP_GUEST_DOMAIN": "guest.meet.jitsi",
  "XMPP_MODULES": "",
  "XMPP_MUC_MODULES": "",
  "XMPP_INTERNAL_MUC_MODULES": "",
  "JVB_BREWERY_MUC": "jvbbrewery",
  "JVB_AUTH_USER": "jvb",
  "JVB_STUN_SERVERS": "meet-jit-si-turnrelay.jitsi.net:443",
  "JVB_PORT": port,
  "JVB_TCP_HARVESTER_DISABLED": "true",
  "JVB_TCP_PORT": "4443",
  "JVB_TCP_MAPPED_PORT": "4443",
  "JICOFO_AUTH_USER": "focus",
  "JIGASI_XMPP_USER": "jigasi",
  "JIGASI_BREWERY_MUC": "jigasibrewery",
  "JIGASI_PORT_MIN": "20000",
  "JIGASI_PORT_MAX": "20050",
  "ENABLE_RECORDING": "0",
  "XMPP_RECORDER_DOMAIN": "recorder."+host,
  "JIBRI_RECORDER_USER": "recorder",
  "JIBRI_RECORDING_DIR": "/config/recordings",
  "JIBRI_FINALIZE_RECORDING_SCRIPT_PATH": "/config/finalize.sh",
  "JIBRI_XMPP_USER": "jibri",
  "JIBRI_BREWERY_MUC": "jibribrewery",
  "JIBRI_PENDING_TIMEOUT": "90",
  "JIBRI_STRIP_DOMAIN_JID": "muc",
  "JIBRI_LOGS_DIR": "/config/logs",
  "DISABLE_HTTPS": "1"
}
agent.write_envfile('jitsi.env', config)
